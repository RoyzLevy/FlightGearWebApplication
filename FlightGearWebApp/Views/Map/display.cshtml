@{
    ViewBag.Title = "display";
}
<html style="height:100%;">
<body style="height:100%; padding:0; margin:0; left:0px; top:0px; z-index:1;">
    <img src="~/Resources/export-map-share.png" onload="resizeCanvas()" style="background-repeat:no-repeat; background-size:cover; position:absolute; padding:0; margin:0; z-index:2; height:100%; width:100%; left:0px; top:0px;" id="bgImg" />
    <canvas id="myCanvas" style="position:absolute; padding:0; margin:0; left:0px; top:0px; z-index:3;" />
</body>
</html>
<script>

    var img = document.getElementById('bgImg');
    var cnvs = document.getElementById("myCanvas");

    cnvs.setAttribute('width', img.clientWidth);
    cnvs.setAttribute('height', window.innerHeight);

    /**
    * Scale proportionally: If the width of the canvas > the height, the canvas height
    * equals the height of the browser window. Else, the canvas width equals the width of the browser window.
    * If the window is resized, the size of the canvas changes dynamically.
    */
    function resizeCanvas() {
        cnvs.style.width = img.width + 'px';
        cnvs.style.height = img.height + 'px';
    }

    window.addEventListener('load', resizeCanvas, false);
    window.addEventListener('resize', resizeCanvas, false);

    var NetworkLon = 0;
    var NetworkLat = 0;
    var ModelLon = 0;
    var ModelLat = 0;
    var normalizedLon = 0;
    var normalizedLat = 0;

    $(window).bind('mousewheel DOMMouseScroll', function (event) {
        if (event.ctrlKey == true) {
            event.preventDefault();
        }
    });

    var ctx = cnvs.getContext("2d");

    var preLon = 0;
    var preLat = 0;
    var firstTime = "1";

    disconnect = (function () {
        $.post("@Url.Action("Disconnect")").done();
    });

    singleDraw = (function () {
        //Drawing the line coming out of the point
        if (firstTime == "0") {
            ctx.strokeStyle = "red";
            ctx.lineWidth = 1;
            ctx.moveTo(preLon, preLat);
            ctx.lineTo(normalizedLon, normalizedLat);
            ctx.stroke();
        }
        //Only draw location-point first time
        else {
            ctx.beginPath();
            ctx.arc(normalizedLon, normalizedLat, 2, 0, 200 * Math.PI, false);
            ctx.lineWidth = 6;
            ctx.strokeStyle = 'blue';
            ctx.stroke();
            ctx.fillStyle = "red";
            ctx.fill();
        }
        //Updates for next time for drawing line
        preLon = normalizedLon;
        preLat = normalizedLat;
        firstTime = "0";
    });

    //////////////Quit Service Segment. Is called upon refresh page / quit page.
    window.onbeforeunload = function (e) {
            //was load from network
            if (isNetworkDisplay == "1") {
                disconnect();
            }
            //was load from file
            else {
                $.post("@Url.Action("CloseFileRead")");
            }
        }
    //////////////

    var isNetworkDisplay = @Session["isNetworkDisplay"];

    // if the display values are received from network connection (server).
    if (isNetworkDisplay == "1") {

        var IntervalTime = @Session["time"] * 1000;

        drawPlanePath = (function () {

            $.post("@Url.Action("GetNetworkXML")").done(function (xml) {
                var xmlDoc = $.parseXML(xml),
                $xml = $(xmlDoc),
                NetworkLat = $xml.find("Lat").text();
                NetworkLon = $xml.find("Lon").text();
                $("#networkLat").text(NetworkLat);
                $("#networkLon").text(NetworkLon);
                normalizedLon = ((parseFloat(NetworkLon) + 180) * (cnvs.width) / 360.0);
                normalizedLat = ((parseFloat(NetworkLat) + 90) * (cnvs.height) / 180.0);

                singleDraw(); // draw single value on the map.
                // if the interval time is 0 - only one-time drawing will be displayed.
                if (IntervalTime == 0) {
                    disconnect();
                }
            });
        });
        if (IntervalTime == 0) {         //one-time show upon not entering time.
            drawPlanePath();
        }
        else {                           //time-based show once every IntervalTime
            setInterval(drawPlanePath, IntervalTime);   // set the drawing function to run each 'IntervalTime' seconds.
            drawPlanePath();
        }
    }
        // else, if the display values are received from previous flight path (existing file).
    else {
        var IntervalTime = @Session["time"] * 1000;
        var isFileEnd = "0";
        function drawPlanePathFile() {
            // if reached file ending - clear the interval for the drawing function.
            if (isFileEnd === "1") {
                clearInterval(functionIntervalId);
            }
            else {
            $.post("@Url.Action("GetInfoModelXML")").done(function (xml) {
                var xmlDoc = $.parseXML(xml),
                    $xml = $(xmlDoc),
                    ModelLat = $xml.find("Lat").text();
                ModelLon = $xml.find("Lon").text();
                isFileEnd = $xml.find("isEOF").text();
                $("#Lat").text(ModelLat);
                $("#Lon").text(ModelLon);
                normalizedLon = ((parseFloat(ModelLon) + 180) * (cnvs.width) / 360.0);
                normalizedLat = ((parseFloat(ModelLat) + 90) * (cnvs.height) / 180.0);
                singleDraw(); // draw single value on the map.
            });
        }
        }
        // set the drawing function to run each 'IntervalTime' seconds.
        var functionIntervalId = setInterval(drawPlanePathFile, IntervalTime);
        drawPlanePathFile();
    }
</script>