@{
        ViewBag.Title = "save";
    }

<html>
<body background="~/Resources/export-map-share.png" style="background-repeat:no-repeat; background-size:cover; padding:0; margin:0" id="bgImg">
    <canvas id="myCanvas" style="border:0.5px solid black"></></canvas>
</body>
</html>

<script>
    var img = document.getElementById('bgImg');
    img.width = window.innerWidth;
    img.height = window.innerHeight;

    var cnvs = document.getElementById("myCanvas");

    cnvs.style.position = "absolute";
    cnvs.setAttribute('width', img.clientWidth);
    cnvs.setAttribute('height', window.innerHeight - 26);

    var ctx = cnvs.getContext("2d");

    var preLon = 0;
    var preLat = 0;
    var normalizedLon = 0;
    var normalizedLat = 0;
    var NetworkLon = 0;
    var NetworkLat = 0;
    var firstTime = "1";

    singleDraw = (function () {
        
        /////////////////////
        //Drawing the line coming out of the point
        if (firstTime == "0") {
            alert("Line cont!")
            ctx.strokeStyle = "red";
            ctx.lineWidth = 2;
            ctx.moveTo(preLon, preLat);
            ctx.lineTo(normalizedLon, normalizedLat);
            ctx.stroke();
        }
        //Only draw location-point first time
        else {
            alert("First Time!");
            ctx.beginPath();
            ctx.arc(normalizedLon, normalizedLat, 2, 0, 100 * Math.PI, false);
            ctx.lineWidth = 6;
            ctx.strokeStyle = 'blue';
            ctx.stroke();
            ctx.fillStyle = "red";
            ctx.fill();
        }
        //Updates for next time for drawing line
        preLon = normalizedLon;
        preLat = normalizedLat;
        firstTime = "0";
    });

    var stop = "false";
    $.post("@Url.Action("OpenNewFile")");
    var IntervalTime = @Session["time"] * 1000
    var IntervalTimeout = @Session["timeout"] * 1000
    function drawAndSavePlanePath() {
        if (IntervalTimeout <= IntervalTime) {
            stop = "true";
            //alert("Done writing!")
            clearInterval(functionIntervalId);
        }
        $.post("@Url.Action("GetNetworkXML")").done(function (xml) {
            if (stop == "false") {
                //alert("writing..");
                var xmlDoc = $.parseXML(xml),
                    $xml = $(xmlDoc),
                    NetworkLat = $xml.find("Lat").text();
                NetworkLon = $xml.find("Lon").text();
                $("#networkLat").text(NetworkLat);
                $("#networkLon").text(NetworkLon);
                $.post("@Url.Action("WriteToFile")");
                normalizedLon = ((parseFloat(NetworkLon) + 180) * (cnvs.width) / 360.0);
                normalizedLat = ((parseFloat(NetworkLat) + 90) * (cnvs.height) / 180.0);
                singleDraw();
            }
            else {
                 $.post("@Url.Action("CloseFileWrite")");
                $.post("@Url.Action("Disconnect")");
            }
        });
        IntervalTimeout -= IntervalTime;
    }
    var functionIntervalId = setInterval(drawAndSavePlanePath, IntervalTime);
    drawAndSavePlanePath();
</script>